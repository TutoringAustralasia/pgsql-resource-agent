#!/bin/bash

#
#   Resource Agent for managing foobar resources.
#
#   License:      PostgreSQL License (BSD Like)
#   (c) 2012-2016 Jehan-Guillaume de Rorthais, Nicolas Thauvin, MaÃ«l Rimbault
#
# Version: v2

# Initialization
: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

# Default parameters
OCF_RESKEY_system_user_default=postgres
OCF_RESKEY_bindir_default=/usr/bin
OCF_RESKEY_pgdata_default=/var/lib/pgsql/data
OCF_RESKEY_pgconf_default=/etc/postgresql/9.4/main/postgresql.conf
OCF_RESKEY_trigger_file_default=""

: ${OCF_RESKEY_system_user=${OCF_RESKEY_system_user_default}}
: ${OCF_RESKEY_bindir=${OCF_RESKEY_bindir_default}}
: ${OCF_RESKEY_pgdata=${OCF_RESKEY_pgdata_default}}
: ${OCF_RESKEY_trigger_file=${OCF_RESKEY_trigger_file_default}}
: ${OCF_RESKEY_pgconf=${OCF_RESKEY_pgconf_default}}


function pgsql_validate_all() {
    local rc

    # FIXME
    # http://www.linux-ha.org/doc/dev-guides/_testing_for_binaries_literal_have_binary_literal_and_literal_check_binary_literal.html

    # check binaries
    check_binary "${OCF_RESKEY_bindir}/postmaster"
    check_binary "${OCF_RESKEY_bindir}/pg_ctl"
    check_binary "${OCF_RESKEY_bindir}/psql"
    check_binary "${OCF_RESKEY_bindir}/pg_controldata"
    check_binary "${HA_SBIN_DIR}/crm_master"

    # check pgdata
    if [ ! -d "${OCF_RESKEY_pgdata}" ] ; then
        ocf_log error "PGDATA \"${OCF_RESKEY_pgdata}\" doesn't exist";
        return $OCF_ERR_CONFIGURED
    fi

    # check pgdata
    if [ ! -s "${OCF_RESKEY_pgdata}/PG_VERSION" ] ; then
        ocf_log error "PG_VERSION does not exists in \"${OCF_RESKEY_pgdata}\"";
        return $OCF_ERR_CONFIGURED
    fi

    # check config
    if [ ! -e "${OCF_RESKEY_pgconf}" ]; then
        ocf_log error "PGCONF does not exist at \"${OCF_RESKEY_pgconf}\"";
    fi

    # check system user
    id -nu "${OCF_RESKEY_system_user}" > /dev/null 2>&1
    rc=$?
    if [ ! $rc ] ; then
        ocf_log error "System user \"${OCF_RESKEY_system_user}\" doesn't exist";
        return $OCF_ERR_CONFIGURED
    fi
}

ocf_meta_data() {
    cat <<EOF
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="pgsqlsr">
  <version>1.0</version>

  <longdesc lang="en">
    Resource script for PostgreSQL in replication. It manages PostgreSQL servers using streaming replication as an HA resource.
  </longdesc>
  <shortdesc lang="en">Manages PostgreSQL servers in replication</shortdesc>
  <parameters>
    <parameter name="startable" unique="0" required="0">
      <longdesc lang="en">
        Values for this parameter show which nodes the resource is startable on.
        If not set, all nodes are allowed to run the resource.
        When set to an hostname, it only allows this one node.
        This is automatically done in case of failover, to avoid failback.
      </longdesc>
      <shortdesc lang="en">Nodes allowed to start the resource</shortdesc>
      <content type="string" default="" />
    </parameter>

    <parameter name="system_user" unique="0" required="0">
      <longdesc lang="en">
        System user account used to run the PostgreSQL server
      </longdesc>
      <shortdesc lang="en">PostgreSQL system User</shortdesc>
      <content type="string" default="${OCF_RESKEY_system_user_default}" />
    </parameter>

    <parameter name="bindir" unique="0" required="0">
      <longdesc lang="en">
        Path to the directory storing the PostgreSQL binaries. The agent uses pg_controldata and pg_ctl.
      </longdesc>
      <shortdesc lang="en">Path to the PostgreSQL binaries</shortdesc>
      <content type="string" default="${OCF_RESKEY_bindir_default}" />
    </parameter>

    <parameter name="pgdata" unique="1" required="0">
      <longdesc lang="en">
        Path to the data directory, e.g. PGDATA
      </longdesc>
      <shortdesc lang="en">Path to the data directory</shortdesc>
      <content type="string" default="${OCF_RESKEY_pgdata_default}" />
    </parameter>

    <parameter name="trigger_file" unique="0" required="0">
      <longdesc lang="en">
        The trigger file to create to promote a standby in production with PostgreSQL 9.0.
        If not set, the promotion uses the "pg_ctl promote" command, incompatible with PostgreSQL
        9.0.
      </longdesc>
      <shortdesc lang="en">Path to the promotion trigger file</shortdesc>
      <content type="string" default="" />
    </parameter>

    <parameter name="pgconf" unique="1" required="0">
      <longdesc lang="en">
        Path to the postgres config file, e.g. ${OCF_RESKEY_pgconf_default}
      </longdesc>
      <shortdesc lang="en">Path to the postgres config file</shortdesc>
      <content type="string" default="${OCF_RESKEY_pgconf_default}" />
    </parameter>

  </parameters>
  <actions>
    <action name="start" timeout="120" />
    <action name="stop" timeout="120" />
    <action name="status" timeout="60" />
    <action name="reload" timeout="120" />
    <action name="monitor" depth="0" timeout="30" interval="30"/>
    <action name="meta-data" timeout="5" />
    <action name="validate-all" timeout="5" />
    <action name="methods" timeout="5" />
  </actions>
</resource-agent>
EOF
}

ocf_methods() {
  cat <<EOF
        start
        stop
        status
        reload
        monitor
        methods
        meta-data
        validate-all
EOF
}

# Check if the PostgreSQL server is master in the replication. We
# check the pg_control instead of connecting to the serveur, this way
# the agent do not require to setup a batch connection with a .pgpass
# file.
#
pg_is_master() {
    local instance_state
    local rc

    instance_state=$(su -l -c "LANG=C ${OCF_RESKEY_bindir}/pg_controldata ${OCF_RESKEY_pgdata} | \
        sed -rn 's/^Database cluster state:\s+(.*)/\1/p'" \
        ${OCF_RESKEY_system_user})

    case $instance_state in
        "in production"|"shut down")
            # Master state
            ocf_log debug "$__OCF_ACTION - pg_is_master : instance $OCF_RESOURCE_INSTANCE is Primary."
            ocf_log debug "$__OCF_ACTION - pg_is_master : instance $OCF_RESOURCE_INSTANCE state is \"$instance_state\"."
            rc=$OCF_SUCCESS
            ;;
        "in archive recovery"|"shut down in recovery")
            # Slave state
            ocf_log debug "$__OCF_ACTION - pg_is_master : instance $OCF_RESOURCE_INSTANCE is Standby."
            ocf_log debug "$__OCF_ACTION - pg_is_master : instance $OCF_RESOURCE_INSTANCE state is \"$instance_state\"."
            rc=$OCF_ERR_GENERIC
            ;;
        *)
            # crash recovery or shutting down
            ocf_log error "$__OCF_ACTION - pg_is_master : unable find out if $OCF_RESOURCE_INSTANCE is Primary or Standby."
            ocf_log debug "$__OCF_ACTION - pg_is_master : instance state is \"$instance_state\"."
            exit $OCF_ERR_GENERIC
            ;;
         esac

    return $rc
}

# Find if a server is running. We use pg_ctl to test if the
# postmaster.pid is correct.
#
# returns $OCF_NOT_RUNNING when stopped, $OCF_SUCCESS when started
pg_is_running() {
    local rc

    su -l -c "LANG=C ${OCF_RESKEY_bindir}/pg_ctl -D ${OCF_RESKEY_pgdata} status 2>/dev/null|grep -q 'server is running'" ${OCF_RESKEY_system_user}
    rc=$?

    # check whether PostgreSQL is running or not
    if [ $rc -eq 0 ]; then
        ocf_log debug "$__OCF_ACTION - pg_is_running : instance $OCF_RESOURCE_INSTANCE is running."
        return $OCF_SUCCESS
    elif [ $rc -eq 1 ]; then
        ocf_log debug "$__OCF_ACTION - pg_is_running : instance $OCF_RESOURCE_INSTANCE is not running."
        return $OCF_NOT_RUNNING
    fi

    # PostgreSQL state is unknown
    ocf_log error "$__OCF_ACTION - pg_is_running : status of instance $OCF_RESOURCE_INSTANCE is unknown."
    return $OCF_ERR_GENERIC
}

# Start the PostgreSQL server
pg_start() {
    local rc

    su -l -c "${OCF_RESKEY_bindir}/pg_ctl -D ${OCF_RESKEY_pgdata} -o \"-c config_file=${OCF_RESKEY_pgconf}\" -w start" ${OCF_RESKEY_system_user}
    rc=$?

    if test $rc -eq 0; then
        ocf_log info "$__OCF_ACTION - pg_start : instance $OCF_RESOURCE_INSTANCE started."
        return $OCF_SUCCESS
    fi

    ocf_log error "$__OCF_ACTION - pg_start : instance $OCF_RESOURCE_INSTANCE failed to start."
    return $OCF_ERR_GENERIC
}

# Stop the PostgreSQL server
pg_stop() {
    local rc

    su -l -c "${OCF_RESKEY_bindir}/pg_ctl -D ${OCF_RESKEY_pgdata} -m fast -w stop" ${OCF_RESKEY_system_user}
    rc=$?

    if test $rc -eq 0; then
        ocf_log info "$__OCF_ACTION - pg_stop : instance $OCF_RESOURCE_INSTANCE stopped."
        return $OCF_SUCCESS
    fi

    ocf_log error "$__OCF_ACTION - pg_stop : instance $OCF_RESOURCE_INSTANCE failed to stop."
    return $OCF_ERR_GENERIC
}

pg_reload() {
    # no action necessary, this action is just to inform pacemaker that
    # modification of non-unique parameters can be applied without
    # restarting the resource
    ocf_log info "$__OCF_ACTION - pg_reload : instance $OCF_RESOURCE_INSTANCE \"startable\" attribute changed to: \"$OCF_RESKEY_startable\"."
    return $OCF_SUCCESS
}

is_startable() {
    # Going back from master to slave automaticaly is dangerous.
    # Avoid any further failover until a human being unblocks the resource.
    # Also, the old master should not be started again.
    test -z "$OCF_RESKEY_startable" -o "$OCF_RESKEY_startable" = "$(uname -n)"
    return $?
}

# Promote a slave server to master (from the PostgreSQL point of
# view). We also modify the startable resource parameter to block
# another failover until a DBA has taken proper action to reinitiate
# the replication. In short, we do not want the cluster to failover
# the resource on another node while a base backup is running, and
# mess with the data.
failover() {
    local rc

    # Change the startable parameter to the name of the promoted slave
    crm_resource --resource $OCF_RESOURCE_INSTANCE --set-parameter startable --parameter-value $(uname -n)

    if [ "${OCF_RESKEY_trigger_file}" ]; then
        ocf_log info "$__OCF_ACTION - failover : Promoting using trigger file '${OCF_RESKEY_trigger_file}'."
        touch "${OCF_RESKEY_trigger_file}"
        rc=$?
        chown "${OCF_RESKEY_system_user}" "${OCF_RESKEY_trigger_file}"
    else
        ocf_log info "$__OCF_ACTION - failover : Promoting using 'pg_ctl promote'."
        su -l -c "${OCF_RESKEY_bindir}/pg_ctl -D ${OCF_RESKEY_pgdata} promote" ${OCF_RESKEY_system_user}
        rc=$?
    fi

    if test $rc -eq 0; then
        # wait for the promote to finish
        while ! pg_is_master
        do
            sleep 1
        done
        ocf_log info "$__OCF_ACTION - failover : instance $OCF_RESOURCE_INSTANCE promoted."
        return $OCF_SUCCESS
    fi

    ocf_log error "$__OCF_ACTION - failover : failed to promote instance ${OCF_RESOURCE_INSTANCE}."
    return $OCF_ERR_GENERIC
}


# Actions
#start   Start the resource      Return 0 on success and an appropriate error code otherwise. Must not report success until the resource is fully active.
#stop    Stop the resource       Return 0 on success and an appropriate error code otherwise. Must not report success until the resource is fully stopped.
#monitor         Check the resource's state      Exit 0 if the resource is running, 7 if it is stopped and anything else if it is failed.
#NOTE: The monitor script should test the state of the resource on the local machine only.
#meta-data       Describe the resource   Provide information about this resource as an XML snippet. Exit with 0.
#NOTE: This is not performed as root.
#validate-all    Verify the supplied parameters are correct      Exit with 0 if parameters are valid, 2 if not valid, 6 if resource is not configured.

case $1 in
    start)
        pgsql_validate_all || exit $?

        # do not attempt to start on another node if startable is set
        if ! is_startable; then
            # Going back from master to slave automaticaly is dangerous
            # Avoid any further failover until a human being unblocks the resource
            ocf_log error "$__OCF_ACTION - Resource is blocked. A failover has occured on \"${OCF_RESKEY_startable}\"."
            ocf_log info "Going back from Primary to Standby forbidden. Rebuild the standby server."
            exit $OCF_ERR_GENERIC
        fi

        # on a master, just start pgsql.
        # start is a promotion on a slave
        if pg_is_master ; then
            # Master
            pg_is_running
            rc=$?

            case $rc in
            $OCF_SUCCESS)
                ocf_log info "$__OCF_ACTION - Primary $OCF_RESOURCE_INSTANCE already started."
                exit $OCF_SUCCESS
                ;;
            $OCF_NOT_RUNNING)
                ocf_log info "$__OCF_ACTION - Starting Primary ${OCF_RESOURCE_INSTANCE}."
                pg_start
                exit $?
                ;;
            $OCF_ERR_GENERIC)
                ocf_log error "$__OCF_ACTION - Undefined status on the Primary ${OCF_RESOURCE_INSTANCE}."
                exit $OCF_ERR_GENERIC
                ;;
            esac
        else
            # Slave
            pg_is_running
            rc=$?

            # if not running, we try to start the slave, then promote it.
            if [ $rc -eq  $OCF_NOT_RUNNING ]; then
                ocf_log info "$__OCF_ACTION - Starting Standby ${OCF_RESOURCE_INSTANCE}."
                pg_start
                pg_is_running
                rc=$?
            fi

            case $rc in
            $OCF_SUCCESS)
                ocf_log info "$__OCF_ACTION - Promoting Standby ${OCF_RESOURCE_INSTANCE} server to Primary."
                failover
                exit $?
                ;;
            $OCF_ERR_GENERIC)
                ocf_log error "$__OCF_ACTION - Undefined status on the Standby ${OCF_RESOURCE_INSTANCE}."
                exit $OCF_ERR_GENERIC
                ;;
            esac
        fi
        ;;
    stop)
        pgsql_validate_all || exit $?

        # On a master, just stop the instance.
        # Stop is ignored on a slave.
        if pg_is_master ; then
            # Master
            pg_is_running
            rc=$?

            case $rc in
            $OCF_SUCCESS)
                ocf_log info "$__OCF_ACTION - Stopping Primary ${OCF_RESOURCE_INSTANCE}."
                pg_stop
                exit $?
                ;;
            $OCF_NOT_RUNNING)
                ocf_log info "$__OCF_ACTION - Primary ${OCF_RESOURCE_INSTANCE} is not running."
                exit $OCF_SUCCESS
                ;;
            $OCF_ERR_GENERIC)
                ocf_log error "$__OCF_ACTION - Undefined status on the Primary ${OCF_RESOURCE_INSTANCE}."
                exit $OCF_ERR_GENERIC
                ;;
            esac
        else
            # Slave
            ocf_log_info "$__OCF_ACTION - No need to stop a Standby."
            exit $OCF_SUCCESS
        fi
        ;;
    reload)
        pg_reload
        exit $?
        ;;
    monitor)
        pgsql_validate_all || exit $?

        # Return the status of each node.
        # As we are in a standalone service from the CRM point of view
        # master should return it is started (rc=$OCF_SUCCESS) and slave
        # it is stopped (rc=$OCF_NOT_RUNNING)
        if pg_is_master; then
            # Master

            pg_is_running
            rc=$?

            if [ $rc -eq $OCF_SUCCESS ] && is_startable; then
                # Master is started and allowed to run.
                ocf_log debug "Monitor successful on Primary"
                exit $OCF_SUCCESS
            elif [ $rc -eq $OCF_SUCCESS ] && ! is_startable; then
                # A Master is started on a not allowed node.
                # Stop it.
                ocf_log error "$__OCF_ACTION - Resource is blocked. A failover has occured on \"${OCF_RESKEY_startable}\"."
                ocf_log info "The instance ${OCF_RESOURCE_INSTANCE} should not run as a Primary on this node."
                pg_stop
                exit $OCF_ERR_GENERIC
            else
                # The instance is stopped
                ocf_log error "$__OCF_ACTION - The instance ${OCF_RESOURCE_INSTANCE} is not running."
                exit $OCF_NOT_RUNNING
            fi
        else
            # Slave
            pg_is_running
            rc=$?

            # if not running, we try to start the slave, then promote it.
            if [ $rc -eq  $OCF_NOT_RUNNING ]; then
                ocf_log info "$__OCF_ACTION - Starting Standby ${OCF_RESOURCE_INSTANCE}."
                pg_start
                pg_is_running
                rc=$?
            fi

            case $rc in
            $OCF_SUCCESS)
                ocf_log debug "Monitor successful on Standby"
                exit $OCF_NOT_RUNNING
                ;;
            $OCF_ERR_GENERIC)
                ocf_log error "$__OCF_ACTION - Undefined state for instance ${OCF_RESOURCE_INSTANCE}."
                exit $OCF_ERR_GENERIC
                ;;
            esac
        fi
        ;;
    meta-data)
        ocf_meta_data
        exit 0
        ;;
    methods)
        ocf_methods
        exit 0
        ;;
    validate-all)
        pgsql_validate_all
        exit $?
        ;;
    *)
        exit $OCF_ERR_UNIMPLEMENTED
        ;;
esac
